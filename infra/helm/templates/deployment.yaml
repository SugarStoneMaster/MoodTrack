apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "moodtrack-api.fullname" . }}
  labels:
    {{- include "moodtrack-api.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "moodtrack-api.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "moodtrack-api.fullname" . }}
        {{- include "moodtrack-api.labels" . | nindent 8 }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      containers:
        - name: moodtrack-api
          image: "{{ required "image.repository mancante" .Values.image.repository }}:{{ required "image.tag mancante" .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
          readinessProbe:
            httpGet: { path: {{ .Values.probes.readiness.path | quote }}, port: {{ .Values.probes.readiness.port }} }
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          livenessProbe:
            httpGet: { path: {{ .Values.probes.liveness.path | quote }}, port: {{ .Values.probes.liveness.port }} }
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          env:
            # ── Non-sensibili da values
            - name: APP_ENV
              value: {{ .Values.env.APP_ENV | quote }}
            - name: APP_CONFIG_LABEL
              value: {{ .Values.env.APP_CONFIG_LABEL | quote }}

            # ── Auth/JWT
            - name: SECRET_KEY
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.api | quote }}, key: SECRET_KEY } }
            - name: ALGORITHM
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.api | quote }}, key: ALGORITHM } }

            # ── DB
            - name: SQL_URL
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.sql | quote }}, key: url } }

            # ── Queue (enqueue sentiment)
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.storage | quote }}, key: conn } }
            - name: SENTIMENT_QUEUE
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.storage | quote }}, key: sentiment_queue } }

            # ── Chiave interna per /internal/*
            - name: JOB_KEY
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.job | quote }}, key: key } }

            # ── Azure OpenAI (Assistant API)
            - name: AZURE_OPENAI_ENDPOINT
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.aoai | quote }}, key: endpoint } }
            - name: AZURE_OPENAI_API_KEY
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.aoai | quote }}, key: api_key } }
            - name: AZURE_OPENAI_API_VERSION
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.aoai | quote }}, key: api_version } }
            - name: AZURE_OPENAI_ASSISTANT_ID
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.aoai | quote }}, key: assistant_id } }

            # ── App Configuration (feature flags)
            - name: APP_CONFIG_CONNECTION_STRING
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.appconfig | quote }}, key: connection_string } }

            # ── Application Insights
            - name: APPLICATIONINSIGHTS_CONNECTION_STRING
              valueFrom: { secretKeyRef: { name: {{ .Values.secrets.appinsights | quote }}, key: connection_string } }

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      nodeSelector: {{- toYaml .Values.nodeSelector | nindent 8 }}
      tolerations:  {{- toYaml .Values.tolerations | nindent 8 }}
      affinity:     {{- toYaml .Values.affinity | nindent 8 }}
