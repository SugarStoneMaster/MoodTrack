name: On-demand Load Test

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "Base URL (es. http://4.232.242.251)"
        default: "http://4.232.242.251"
        required: true
        type: string
      vus:
        description: "Virtual users per engine"
        default: "50"
        type: number
      duration_s:
        description: "Durata (sec)"
        default: "200"
        type: number
      rampup_s:
        description: "Ramp-up (sec)"
        default: "100"
        type: number
      engines:
        description: "Engine instances"
        default: "1"
        type: number
      include_chatbot:
        description: "Aggiungi POST /chatbot/send_message"
        default: false
        type: boolean
      threshold_error_pct:
        description: "Soglia percentage(error)"
        default: "2"
        type: number
      threshold_avg_ms:
        description: "Soglia avg(response_time_ms)"
        default: "1500"
        type: number
      threshold_post_p95_ms:
        description: "Soglia p95 POST /entries (ms)"
        default: "700"
        type: number

jobs:
  run-alt:
    runs-on: ubuntu-latest
    env:
      ALT_RG:   ${{ vars.ALT_RG || 'rg-moodtrack-dev' }}
      ALT_NAME: ${{ vars.ALT_NAME || 'alt-moodtrack-dev' }}
      TEST_ID:  moodtrack-api-url
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure Load Testing CLI extension
        run: |
          set -euo pipefail
          az extension add --name load --yes || az extension update --name load

      - name: Prepara working dir e patch dinamiche
        run: |
          set -euo pipefail
          mkdir -p work
          cp loadtests/config.yaml   work/config.yaml
          cp loadtests/requests.json work/requests.json
          cp loadtests/users.csv     work/users.csv || true

          echo "⮑ Patch VU/durata/ramp in requests.json"
          jq --argjson vus "${{ inputs.vus }}" \
             --argjson dur "${{ inputs.duration_s }}" \
             --argjson ramp "${{ inputs.rampup_s }}" \
             '.testSetup[0].virtualUsersPerEngine=$vus
              | .testSetup[0].durationInSeconds=$dur
              | .testSetup[0].rampUpTimeInSeconds=$ramp' \
             work/requests.json > work/requests.tmp && mv work/requests.tmp work/requests.json

          if [ "${{ inputs.include_chatbot }}" = "true" ]; then
            echo "⮑ Aggiungo richiesta /chatbot/send_message"
            jq '.scenarios.apiScenario.requests += [{
                  "requestName":"chat",
                  "requestType":"URL",
                  "endpoint":"${API_BASE}/chatbot/send_message",
                  "method":"POST",
                  "headers":{"Content-Type":"application/json","Authorization":"Bearer ${token}"},
                  "body":"{ \"message\": \"ping\" }",
                  "requestBodyFormat":"JSON"
                }]' \
                work/requests.json > work/requests.tmp && mv work/requests.tmp work/requests.json
          fi

          echo "⮑ Patch engineInstances e soglie in config.yaml (schema nuovo)"
          sed -i -E "s/(engineInstances:\s*)[0-9]+/\1${{ inputs.engines }}/" work/config.yaml
          sed -i -E "s|value: \"http://REPLACE_ME\"|value: \"${{ inputs.api_base }}\"|" work/config.yaml
          sed -i -E "s/percentage\(error\) > [0-9]+/percentage(error) > ${{ inputs.threshold_error_pct }}/" work/config.yaml
          sed -i -E "s/avg\(response_time_ms\) > [0-9]+/avg(response_time_ms) > ${{ inputs.threshold_avg_ms }}/" work/config.yaml
          sed -i -E "s/(post-entry: p95\(latency\) > )([0-9]+)/\1${{ inputs.threshold_post_p95_ms }}/" work/config.yaml

          echo "----- config.yaml -----"; cat work/config.yaml
          echo "----- requests.json ---"; jq '.testSetup, .scenarios.apiScenario.requests[].requestName' work/requests.json

      - name: Crea/Aggiorna test in ALT
        run: |
          set -euo pipefail
          az load test create \
            --resource-group "$ALT_RG" \
            --load-test-resource "$ALT_NAME" \
            --test-id "$TEST_ID" \
            --load-test-config-file work/config.yaml \
            --path work

      - name: Avvia test-run
        run: |
          set -euo pipefail
          RUN_ID="run_$(date +%s)"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          az load test-run create \
            --resource-group "$ALT_RG" \
            --load-test-resource "$ALT_NAME" \
            --test-id "$TEST_ID" \
            --test-run-id "$RUN_ID" \
            --display-name "on-demand via GitHub Actions"

      - name: Scarica risultati
        run: |
          mkdir -p alt-results
          az load test-run download-files \
            --resource-group "$ALT_RG" \
            --load-test-resource "$ALT_NAME" \
            --test-run-id "$RUN_ID" \
            --path alt-results

      - uses: actions/upload-artifact@v4
        with:
          name: alt-results
          path: alt-results