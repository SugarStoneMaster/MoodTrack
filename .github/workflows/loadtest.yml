name: On-demand Load Test

on:
  workflow_dispatch:
    inputs:
      api_base:
        description: "Base URL (es. http://4.232.242.251)"
        required: true
        type: string
      vus:
        description: "Virtual users per engine"
        required: false
        default: "20"
        type: number
      duration_s:
        description: "Durata (sec)"
        required: false
        default: "600"
        type: number
      rampup_s:
        description: "Ramp-up (sec)"
        required: false
        default: "120"
        type: number
      engines:
        description: "Engine instances"
        required: false
        default: "1"
        type: number
      include_chatbot:
        description: "Aggiungi POST /chatbot/send_message"
        required: false
        default: false
        type: boolean

jobs:
  run-alt:
    runs-on: ubuntu-latest
    env:
      ALT_RG:   ${{ vars.ALT_RG || 'rg-moodtrack-dev' }}
      ALT_NAME: ${{ vars.ALT_NAME || 'alt-moodtrack-dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepara working dir e patch dinamiche
        run: |
          set -euo pipefail
          mkdir -p work
          cp loadtests/config.yaml   work/config.yaml
          cp loadtests/requests.json work/requests.json
          cp loadtests/users.csv     work/users.csv || true

          # Patch VU/durata/ramp
          jq --argjson vus  "${{ inputs.vus }}" \
             --argjson dur  "${{ inputs.duration_s }}" \
             --argjson ramp "${{ inputs.rampup_s }}" \
             '.testSetup[0].virtualUsersPerEngine=$vus
              | .testSetup[0].durationInSeconds=$dur
              | .testSetup[0].rampUpTimeInSeconds=$ramp' \
             work/requests.json > work/requests.tmp && mv work/requests.tmp work/requests.json

          # (opz) Aggiungi la request chatbot
          if [ "${{ inputs.include_chatbot }}" = "true" ]; then
            jq '.scenarios.apiScenario.requests += [{
                  "requestName":"chat",
                  "requestType":"URL",
                  "endpoint":"${API_BASE}/chatbot/send_message",
                  "method":"POST",
                  "headers":{"Content-Type":"application/json","Authorization":"Bearer ${token}"},
                  "body":"{ \"message\": \"ping\" }",
                  "requestBodyFormat":"JSON"
                }]' \
              work/requests.json > work/requests.tmp && mv work/requests.tmp work/requests.json
          fi

          # Patch engine instances nel config
          sed -i -E "s/^engineInstances:\s*[0-9]+/engineInstances: ${{ inputs.engines }}/" work/config.yaml

          echo "----- config.yaml -----"; cat work/config.yaml
          echo "----- requests.json ---"; jq '.testSetup, .scenarios.apiScenario.requests[].requestName' work/requests.json

      # ✅ Usa l'action UFFICIALE pinning una release stabile
      - name: Azure Load Testing (URL-based)
        uses: azure/load-testing@v1.1.28   # <-- pin fisso, NON 'v1'
        with:
          loadTestResource:   ${{ env.ALT_NAME }}     # camelCase corretto
          resourceGroup:      ${{ env.ALT_RG }}
          loadTestConfigFile: work/config.yaml
        env:
          API_BASE: ${{ inputs.api_base }}            # valorizza ${API_BASE} nel requests.json

      - name: Pubblica risultati ALT
        uses: actions/upload-artifact@v4
        with:
          name: alt-results
          path: loadTest

      # 🔁 (OPZIONALE) FALLBACK via CLI se non vuoi l'action
      # - name: (Fallback) Installa/aggiorna estensione 'load' e crea/avvia test via CLI
      #   run: |
      #     set -euo pipefail
      #     az extension remove -n load || true
      #     az extension add -n load --upgrade -y
      #
      #     # Crea/aggiorna il test con il file YAML (schema v0.1)
      #     az load test create \
      #       -g "${{ env.ALT_RG }}" --load-test-resource "${{ env.ALT_NAME }}" \
      #       --test-id moodtrack-api-url \
      #       --load-test-config-file work/config.yaml
      #
      #     # Assicura l'upload dei file (separato, per sicurezza)
      #     az load test file upload \
      #       -g "${{ env.ALT_RG }}" --load-test-resource "${{ env.ALT_NAME }}" \
      #       --test-id moodtrack-api-url \
      #       --path work/requests.json
      #     if [ -f work/users.csv ]; then
      #       az load test file upload \
      #         -g "${{ env.ALT_RG }}" --load-test-resource "${{ env.ALT_NAME }}" \
      #         --test-id moodtrack-api-url \
      #         --path work/users.csv
      #     fi
      #
      #     RUN_ID="run_$(date +%s)"
      #     az load test-run create \
      #       -g "${{ env.ALT_RG }}" --load-test-resource "${{ env.ALT_NAME }}" \
      #       --test-id moodtrack-api-url \
      #       --test-run-id "$RUN_ID" \
      #       --display-name "on-demand" \
      #       --env "API_BASE=${{ inputs.api_base }}"