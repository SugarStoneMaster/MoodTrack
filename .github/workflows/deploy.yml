name: Build, Deploy & Smoke Test

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write
  actions: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.ACR_LOGIN_SERVER }}/moodtrack-api:${{ github.sha }}
      RESOURCE_GROUP: rg-moodtrack-dev
      CLUSTER_NAME: aks-moodtrack-dev
      NAMESPACE: moodtrack
      SERVICE_NAME: moodtrack-api-svc
      TENANT: ${{ secrets.B2C_TENANT }}
      CLIENT_ID_API: ${{ secrets.TENANT_CLIENT_API_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build --platform linux/amd64 -t $IMAGE .

      - name: Login to ACR
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username:     ${{ secrets.ACR_USERNAME }}
          password:     ${{ secrets.ACR_PASSWORD }}

      - name: Push to ACR
        run: docker push $IMAGE

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure AKS cluster is running
        run: |
          POWER_STATE=$(az aks show \
            --resource-group $RESOURCE_GROUP \
            --name $CLUSTER_NAME \
            --query powerState.code -o tsv)
          echo "AKS powerState: $POWER_STATE"
          if [[ "$POWER_STATE" == "Stopped"* ]]; then
            echo "Starting AKS cluster..."
            az aks start \
              --resource-group $RESOURCE_GROUP \
              --name $CLUSTER_NAME
            az aks wait \
              --resource-group $RESOURCE_GROUP \
              --name $CLUSTER_NAME \
              --created
          else
            echo "Cluster already running, skipping start."
          fi

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group:       ${{ env.RESOURCE_GROUP }}
          cluster-name:         ${{ env.CLUSTER_NAME }}
          subscription-id:      ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          use-admin-credentials: true

      - name: Rolling update Deployment
        run: |
          kubectl set image deployment/moodtrack-api \
            api=$IMAGE \
            -n $NAMESPACE
          kubectl rollout status deployment/moodtrack-api \
            -n $NAMESPACE --timeout=500s

      # --- smoke tests ---
      - name: Smoke test /health
        run: |
          echo "Testing /health..."
          LB_IP=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          HTTP_STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://$LB_IP/health)
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ /health returned $HTTP_STATUS"
            exit 1
          fi
          echo "✅ /health OK"

      - name: Smoke test /protected
        run: |
          echo "Fetching B2C token via Azure CLI..."
          TOKEN=$(az account get-access-token \
            --tenant $TENANT \
            --scope api://$CLIENT_ID_API/.default \
            --query accessToken -o tsv)
          echo "Testing /protected endpoint..."
          LB_IP=$(kubectl get svc $SERVICE_NAME -n $NAMESPACE \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          HTTP_STATUS=$(curl -s -o /dev/null -w '%{http_code}' \
            -H "Authorization: Bearer $TOKEN" \
            http://$LB_IP/protected)
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ /protected returned $HTTP_STATUS"
            exit 1
          fi
          echo "✅ /protected OK"